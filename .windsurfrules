Please follow the guidelines below.
## 基本的なルール

- 指定がなければ日本語を使用する
- ユーザーの指示が不明瞭の場合は前提条件を確認する
- 実行中にユーザーやプロジェクトに対する気づきがあった場合は，`/.insight.md`に出力もしくは更新する
  - 更新内容のユーザーへの報告は不要
  - 中でも重要なものは`/.windsurfrules`に更新し，以降の出力に反映させる
- Chat modeではファイルの編集はせず，対応内容だけ提示してください．
- `.env`にアクセスしない
- コードを変更するときは、常にコードが使用されているコンテキストを考慮してください。変更が既存のコードベースと互換性があり、プロジェクトのコーディング標準とベストプラクティスに従っていることを確認してください。
- 「素晴らしい」、「確かに」、「わかりました」、「はい」でメッセージを開始することは厳禁です。応答で会話形式を使用するのではなく、直接的で的を射たものでなければなりません。たとえば、「素晴らしい、CSSを更新しました」と言うべきではなく、「CSSを更新しました」のようなことを言うべきです。メッセージでは、明確で技術的であることが重要です。

## 規約

### プロジェクト規約

- `/docs`に設計を出力する
  - docsはmd形式で記述する
  - 実装時に設計の変更が必要な場合は`/docs`を更新する

### コーディング規約

実装は以下のprettierrcに従う
```json
{
	"tabWidth": 4,
	"useTabs": true,
	"singleQuote": true,
	"semi": true,
	"trailingComma": "all",
	"bracketSpacing": true,
	"printWidth": 100,
	"overrides": [
		{
			"files": "*.md",
			"options": {
				"tabWidth": 2
			}
		}
	]
}
```

### コメント

- コメントは日本語で書く
- ソースファイル(json等の設定ファイルを除く)を新規作成する場合は，ファイルの先頭に必ず詳細なコメントを書く
- 実装の意図がコードから読み取りにくい場合は，コメントにて意図を示す
- AIで生成したコードにはプロンプトをコメントに含める

## TypeScript Style

- 極力Classの使用を避ける
- 関数は必ず型を明確にする

## Next.js Style

- App Routerを採用する
- API Routeは極力しようせず，Server Actions等を活用する
  - どうしても必要な場合は，ユーザーに確認する
  - 規模に応じてバックエンドは別途作成する

## Prisma

- テーブル定義`schema.prisma`にはコメントで各カラムの説明を書く

データベースのスキーマを変更した場合
(pnpm devが実行されていない前提)
1. データベースへ変更を反映する
```bash
pnpm prisma db push
```
2. prismaクライアントを再生成する
```bash
pnpm prisma generate
```
